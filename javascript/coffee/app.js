// Generated by CoffeeScript 1.7.1
(function() {
  'use scrict';
  var ChildManager, MSocketServer, MemoryStore, exec, express, fs, global, http, path, server, socketServer, _;

  _ = require('underscore');

  process.on('uncaughtException', (function(_this) {
    return function(err) {
      console.error('Uncaught Exception ===');
      console.error(err.stack);
      return console.log(_.keys(_this.fire));
    };
  })(this));


  /*
  	Module dependencies.
   */

  express = require('express');

  http = require('http');

  fs = require('fs');

  path = require('path');


  /*
  	Global variables
   */

  global.REQUEST_TIMEOUT_MS = 10000;

  global.config = require('./config');

  global.version = config.version;

  global.rootPath = path.join(__dirname, '..');

  MemoryStore = express.session.MemoryStore;

  global.sessionStore = new MemoryStore();

  global.moduleConfig = {};

  global.logger = require(path.join(rootPath, 'util/logger'));

  global = _.extend(global, require(path.join(rootPath, 'util/common')));

  fs.mkdir(tmpPath, function() {});

  fs.readFile(path.join(rootPath, 'version.txt'), 'utf8', function(err, data) {
    if (err) {
      logger.warning(err);
      return;
    }
    return global.version = data.split('-').slice(0, 1).join('-');
  });

  _.each(fs.readdirSync(path.join(modulePath, 'apps'), function(dir) {
    var mConfig, targetPath;
    targetPath = path.join(modulePath, 'apps', dir);
    mConfig = readJSONSync(path.join(targetPath, 'config.json'));
    _.each(mConfig.modules, function(module, name) {
      var cmd, mpath, mtimeout;
      cmd = module.command;
      mpath = module.module_path;
      mtimeout = module.timeout;
      module.command = replaceEnv(config.module.command_alias[cmd] || cmd);
    });
    return global.moduleConfig[dir] = {
      http: mConfig.http
    };
  }));

  if ('development' === app.get('env')) {
    app.use(express.errorHandler());
  }

  app.get('/test', session.test);

  app.get('/mobigen/*', routes.mobigen);

  child.autoRoutes(app, session.check);


  /*
  	Web Server Listening
   */

  server = http.createServer(app).listen(app.get('port'), function() {
    var port;
    port = app.get('port');
    return logger.notice("Http Server listening on port " + port);
  });

  MSocketServer = require('./lib/mserver');

  socketServer = new MSocketServer();

  socketServer.listen(server);

  ChildManager = require('./lib/child_manager');

  global.childManager = new ChildManager();

  exec = require('child_process').exec;

  process.once('SIGINT', function() {
    return async.parallel([
      function(cb) {
        logger.notice('all child process exiting.....');
        return childManager.destroy(cb);
      }, function(cb) {
        logger.notice('remote cache files.....');
        return child.destroy(cb);
      }, function(cb) {
        logger.notice("remove " + tmpPath + " .....");
        return exec("rm -rf " + tmpPath, cb);
      }
    ], function(err) {
      if (err) {
        logger.error(err);
      }
      return process.exit(0);
    });
  });

}).call(this);
